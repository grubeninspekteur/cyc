#!/usr/bin/python

import datetime
import sys
import json
import os
import shlex
import shutil
import subprocess

def destName(destDir, version, dtype):
    if dtype == 'web':
        return destDir+"/cyr##"+version+".war"
    if dtype == 'engine':
        return destDir+"/cyc"+version+"/engine-jar-with-dependencies.jar"
    return -1
def execCalcHash(fileName):
    if not os.path.exists(fileName):
        return "file_does_not_exist";
    if not os.path.isfile(fileName):
        return "file_is_not_a_regular_file";
    tmpFileName = "/tmp/fileToCheck.zip"
    shutil.copy2(fileName, tmpFileName)
    p = subprocess.Popen(["(unzip -d tempUnzipDir "+tmpFileName+" >/dev/null && rm -rf tempUnzipDir/META-INF/ && rm -rf tempUnzipDir/WEB-INF/lib/web-*.jar && rm -rf tempUnzipDir/WEB-INF/lib/ ersistence-*.jar && find tempUnzipDir/ -type f | xargs shasum | awk '{print $1}'|sort|shasum && rm -rf tempUnzipDir && unzip "+tmpFileName+" WEB-INF/lib/web-*.jar >/dev/null && unzip "+tmpFileName+" WEB-INF/lib/persistence-*.jar >/dev/null && for file in WEB-INF/lib/*; do (unzip -d tempUnzipDir $file >/dev/null && rm -rf tempUnzipDir/META-INF/ && find tempUnzipDir/ -type f | xargs shasum | awk '{print $1}'|sort|shasum && rm -rf tempUnzipDir) ; done && rm -rf WEB-INF/ ) | sort | shasum"], shell=True, cwd="/tmp", stdout=subprocess.PIPE)
    result = p.communicate()[0]
    p.wait()
    os.remove(tmpFileName)
    return result


args_file = sys.argv[1]
args_data = file(args_file).read()
arguments = shlex.split(args_data)
for arg in arguments:
    if arg.find("=") != -1:
        (key, value) = arg.split("=")
        if key == "src":
            src=value
        if key == "dest":
            dest=value
        if key == "dtype":
            dtype=value

latest_version=000
if os.path.exists(dest):
    for filename in os.listdir (dest):
        if dtype == 'engine':
            if filename.startswith("cyc"):
                this_version=int(filename[3:])
                if this_version>latest_version:
                    latest_version=this_version
        if dtype == 'web':
            if filename.startswith("cyr") and os.path.isfile(dest+"/"+filename):
                this_version=int(filename[5:-4])
                if this_version>latest_version:
                    latest_version=this_version
next_version = str("%03d" % (latest_version+1))       
latest_version = str("%03d" % latest_version)

resultA = execCalcHash(src)
resultB = execCalcHash(destName(dest, latest_version, dtype))

changed = False
if resultA != resultB:
    changed = True
    if dtype == 'engine':
        os.makedirs(dest+"/tmp-deploy")
        shutil.copy2(src, dest+"/tmp-deploy")
        os.rename(dest+"/tmp-deploy", dest+"/cyc"+latest_version)
    if dtype == 'web':
        shutil.copy2(src, dest+"/cyr##"+latest_version+".war")

print json.dumps({
    "dtype" : dtype,
    "src" : src,
    "dest" : dest,
    "latest_version" : latest_version,
    "next_version" : next_version,
    "resultA": resultA,
    "resultB": resultB,
    "destName": destName(dest, latest_version, dtype),
    "changed": changed
})


